    let x1 = 0;
    let y1 = 0;
    let x2 = 0;
    let y2 = 0;
    let positionCounter = 0;
    let drawLines = 1;
    let lines_vector = [];
    let rectangle = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0
    };

    function Rectangle() {
        drawLines = 0;
    }

    function DrawRectangle(x1, y1, x2, y2) {
        if (x1 - x2 > 0) {
            let tempX1 = x1;
            x1 = x2;
            x2 = tempX1;
        }
        if (y1 - y2 > 0) {
            let tempY1 = y1;
            y1 = y2;
            y2 = tempY1;
        }
        for (let horizontalStep = 0; horizontalStep < (x2 - x1); horizontalStep++) {
            ctx.fillStyle = "rgb(0,164,86)";
            ctx.fillRect(x1 + horizontalStep, y1, 1, 1);
            ctx.fillRect(x2 - horizontalStep, y2, 1, 1);
        }
        for (let vertivalStep = 0; vertivalStep < (y2 - y1); vertivalStep++) {
            ctx.fillStyle = "rgb(0,164,86)";
            ctx.fillRect(x1, y1 + vertivalStep, 1, 1);
            ctx.fillRect(x2, y2 - vertivalStep, 1, 1);
        }
        rectangle.x1 = x1;
        rectangle.y1 = y1;
        rectangle.x2 = x2;
        rectangle.y2 = y2;
        drawLines = 1;
    }

    function DrawLine(startX, startY, endX, endY) {
        let k = (startY - endY) / (endX - startX);

        PaintPoint(startX, startY, ctx);
        let e = 0;
        let step = 1;
        let currentX;
        let currentY;
        let UpOrDown = 0;
        let destination = 0;
        let xStep = 0;
        let yStep = 0;

        if ((k >= 1) || (k <= -1)) {
            destination = Math.abs(endY - startY);
            k = (endX - startX) / (startY - endY);
            yStep = 1;
        }
        else {
            destination = Math.abs(endX - startX);
            xStep = 1;
        }

        if (k > 0) {
            UpOrDown = -1;
        } else if (k < 0) {
            UpOrDown = 1;
        } else if (k === 0) {
            if (startY > endY) {
                UpOrDown = -1;
            }
            else {
                UpOrDown = 1;
            }
        }

        if ((endX - startX) < 0) {
            currentX = endX;
            currentY = endY;
        } else {
            currentX = startX;
            currentY = startY;
        }

        while (step < destination) {
            e += k;

            if (Math.abs(e) < 0.5) {
                PaintPoint(currentX + xStep, currentY + yStep * UpOrDown, ctx);
            }
            else {
                PaintPoint(currentX + 1, currentY + UpOrDown, ctx);
                currentY += UpOrDown * xStep;
                currentX += yStep;
                e += UpOrDown;
            }
            currentX += xStep;
            currentY += yStep * UpOrDown;
            step += 1;
        }
    }

    function PaintPoint(x, y, ctx) {
        ctx.fillStyle = "rgb(0,0,0)";
        ctx.fillRect(x, y, 1, 1);
    }

    function UseAlgorithm() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        DrawRectangle(rectangle.x1, rectangle.y1, rectangle.x2, rectangle.y2);

        for (let i = 0; i < lines_vector.length; ++i) {
            LiangBarsky(rectangle.x1, rectangle.x2, rectangle.y1, rectangle.y2, lines_vector[i].startX, lines_vector[i].endX, lines_vector[i].startY, lines_vector[i].endY);
        }
    }

    function LiangBarsky(xmin, xmax, ymin, ymax, xl1, xl2, yl1, yl2) {
        let p1 = -(xl2 - xl1);
        let p2 = -p1;
        let p3 = -(yl2 - yl1);
        let p4 = -p3;

        let q1 = xl1 - xmin;
        let q2 = xmax - xl1;
        let q3 = yl1 - ymin;
        let q4 = ymax - yl1;

        let negative = [];
        let positive = [];

        negative.push(0);
        positive.push(1);

        if ((p1 === 0 && q1 < 0) || (p3 === 0 && q3 < 0)) {
            return; // вне окна
        }

        if (p1 !== 0) {
            let u1 = q1 / p1;
            let u2 = q2 / p2;
            if (p1 < 0) {
                negative.push(u1);
                positive.push(u2);
            } else {
                negative.push(u2);
                positive.push(u1);
            }
        }
        if (p3 !== 0) {
            let u3 = q3 / p3;
            let u4 = q4 / p4;
            if (p3 < 0) {
                negative.push(u3);
                positive.push(u4);
            } else {
                negative.push(u4);
                positive.push(u3);
            }
        }

        let xn1, yn1, xn2, yn2;
        let rn1, rn2;
        rn1 = Math.max.apply(null, negative);
        rn2 = Math.min.apply(null, positive);

        if (rn1 > rn2) {
            return;
        }

        xn1 = xl1 + p2 * rn1;
        yn1 = yl1 + p4 * rn1;

        xn2 = xl1 + p2 * rn2;
        yn2 = yl1 + p4 * rn2;
        DrawLine(xn1, yn1, xn2, yn2);
    }

    function onClick(event) {
        event.preventDefault();

        if (drawLines === -1) {
            return;
        }

        if (positionCounter === 0) {
            ctx.fillStyle = "rgb(100,100,200)";
            ctx.fillRect(event.offsetX - 1, event.offsetY - 1, 3, 3);
            x1 = event.offsetX;
            y1 = event.offsetY;
            positionCounter += 1;
        }
        else if (positionCounter === 1) {
            ctx.fillStyle = "rgb(100,100,200)";
            ctx.fillRect(event.offsetX - 1, event.offsetY - 1, 3, 3);
            x2 = event.offsetX;
            y2 = event.offsetY;
            positionCounter = 0;

            if (drawLines === 1) {
                DrawLine(x1, y1, x2, y2);
                let line = {
                    startX: x1,
                    startY: y1,
                    endX: x2,
                    endY: y2
                };

                lines_vector.push(line);
            }
            else if (drawLines === 0) {
                DrawRectangle(x1, y1, x2, y2);
                UseAlgorithm();
            }
        }
    }

    // Main code
    let canvas = CanvasInit('canvas');
    let ctx = canvas.getContext('2d');
    canvas.addEventListener('click', onClick);
